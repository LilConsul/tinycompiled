; TinyCompiled Example - Comprehensive Syntax Test
; This file demonstrates all currently supported syntax features
; Based on the implemented keywords and parser functionality

; ==========================================
; SECTION 1: Variable Declarations
; ==========================================
; VAR supports both initialized and uninitialized variables
VAR counter, 0
VAR sum, 100
VAR result
VAR temp, 255
VAR binary_val, 10

; ==========================================
; SECTION 2: Data Movement
; ==========================================
; LOAD: Load immediate or variable into register
LOAD R1, 42
LOAD R2, counter
LOAD R3, 0xFF
LOAD R4, 0b1010

; SET: Set variable to register or immediate value
SET sum, 200
SET result, R1
SET counter, 5

; Note: MOVE is not yet implemented
; MOVE R3, R2

; ==========================================
; SECTION 3: Arithmetic Operations
; ==========================================
; Binary operations: ADD, SUB, MUL, DIV
; Syntax: OP dest_reg, src_reg, src_reg_or_immediate

ADD R4, R1, R2        ; Add two registers
ADD R5, R1, 10        ; Add immediate to register
SUB R6, R5, R4        ; Subtract registers
MUL R7, R2, 3         ; Multiply register by immediate
DIV R8, R7, 2         ; Divide register by immediate

; Note: INC and DEC are not yet implemented
; INC R1
; DEC counter

; ==========================================
; SECTION 4: Logical Operations
; ==========================================
; Bitwise operations: AND, OR, XOR
AND R1, R2, R3        ; Bitwise AND
OR R4, R5, R6         ; Bitwise OR
XOR R7, R8, R1        ; Bitwise XOR

; Note: NOT is not yet implemented
; NOT R2, R3

; ==========================================
; SECTION 5: Shift Operations
; ==========================================
; Note: SHL and SHR are not yet implemented
; SHL R1, R2, 2
; SHR R3, R4, 1

; ==========================================
; SECTION 6: Comparison and Jumps
; ==========================================
; Note: CMP and jump instructions are not yet implemented
; CMP R1, 10
; JMP main_loop
; JE equal_label
; JNE not_equal_label
; JG greater_label
; JL less_label
; JGE greater_equal_label
; JLE less_equal_label

; ==========================================
; SECTION 7: Labels
; ==========================================
; Note: Labels are not yet implemented
; main_loop:
;     LOAD R1, counter
;     ADD R1, R1, 1
;     SET counter, R1

; ==========================================
; SECTION 8: Control Flow - IF Statement
; ==========================================
; Note: IF/ELSE/ENDIF are not yet implemented
; IF R1 > 5
;     PRINT R1
; ELSE
;     PRINT "Small value"
; ENDIF

; ==========================================
; SECTION 9: Control Flow - WHILE Loop
; ==========================================
; Note: WHILE/ENDWHILE are not yet implemented
; WHILE counter < 5
;     PRINT counter
; ENDWHILE

; ==========================================
; SECTION 10: Control Flow - FOR Loop
; ==========================================
; Note: FOR/FROM/TO/STEP/ENDFOR are not yet implemented
; FOR i FROM 0 TO 10 STEP 2
;     PRINT i
; ENDFOR

; ==========================================
; SECTION 11: Control Flow - LOOP Statement
; ==========================================
; Note: LOOP/ENDLOOP are not yet implemented
; LOOP counter, 5
;     PRINT counter
; ENDLOOP

; ==========================================
; SECTION 12: Control Flow - REPEAT-UNTIL
; ==========================================
; Note: REPEAT/UNTIL are not yet implemented
; REPEAT
;     PRINT counter
; UNTIL counter == 10

; ==========================================
; SECTION 13: Functions
; ==========================================
; Note: FUNC/ENDFUNC/CALL/RET are not yet implemented
; FUNC add_numbers
;     ADD R1, R2, R3
;     RET R1
; ENDFUNC

; ==========================================
; SECTION 14: Stack Operations
; ==========================================
; Note: PUSH/POP are not yet implemented
; PUSH R1
; POP R3

; ==========================================
; SECTION 15: I/O Operations
; ==========================================
; PRINT: Output a register, variable, or immediate value
PRINT counter
PRINT R1
PRINT sum
PRINT result

; INPUT: Read input into register or variable
INPUT R1
INPUT result

; ==========================================
; SECTION 16: System Operations
; ==========================================
; NOP: No operation
NOP

; HALT: Stop execution
HALT

; ==========================================
; SECTION 17: Working Example Program
; ==========================================
; This example demonstrates a simple calculation
; that uses only the currently implemented features

; Initialize variables
VAR a, 10
VAR b, 20
VAR c

; Load values into registers
LOAD R1, a
LOAD R2, b

; Perform arithmetic
ADD R3, R1, R2        ; R3 = a + b = 30
MUL R4, R3, 2         ; R4 = R3 * 2 = 60
SUB R5, R4, R1        ; R5 = R4 - R1 = 50
DIV R6, R5, 5         ; R6 = R5 / 5 = 10

; Store result
SET c, R6

; Perform logical operations
AND R7, R1, R2        ; R7 = R1 & R2
OR R8, R1, R2         ; R8 = R1 | R2
XOR R1, R1, R2        ; R1 = R1 ^ R2

; Print results
PRINT a
PRINT b
PRINT c
PRINT R3
PRINT R4
PRINT R5
PRINT R6
PRINT R7
PRINT R8

; Get user input
INPUT R1
PRINT R1

; End program
HALT

