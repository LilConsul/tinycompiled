; TinyCompiled Example - Comprehensive Syntax Test
; This file demonstrates all syntax features

; ==========================================
; SECTION 1: Variable Declarations
; ==========================================
VAR counter, 0
VAR sum, 100
VAR result
VAR temp, 0xFF
VAR binary_val, 0b1010

; ==========================================
; SECTION 2: Data Movement
; ==========================================
LOAD R1, 42
LOAD R2, counter
SET sum, 200
SET result, R1
MOVE R3, R2

; ==========================================
; SECTION 3: Arithmetic Operations
; ==========================================
ADD R4, R1, R2        ; Add two registers
ADD R5, R1, 10        ; Add immediate to register
SUB R6, R5, R4        ; Subtract
MUL R7, R2, 3         ; Multiply
DIV R8, R7, 2         ; Divide
INC R1                ; Increment
DEC counter           ; Decrement variable

; ==========================================
; SECTION 4: Logical Operations
; ==========================================
AND R1, R2, R3
OR R4, R5, R6
XOR R7, R8, R1
NOT R2, R3

; ==========================================
; SECTION 5: Shift Operations
; ==========================================
SHL R1, R2, 2
SHR R3, R4, 1

; ==========================================
; SECTION 6: Comparison and Jumps
; ==========================================
CMP R1, 10
JMP main_loop
JE equal_label
JNE not_equal_label
JG greater_label
JL less_label
JGE greater_equal_label
JLE less_equal_label

; ==========================================
; SECTION 7: Labels
; ==========================================
main_loop:
    LOAD R1, counter
    ADD R1, R1, 1
    SET counter, R1
    CMP R1, 10
    JL main_loop

equal_label:
    PRINT "Equal!"
    JMP end_program

not_equal_label:
    PRINT "Not equal"
    JMP end_program

greater_label:
less_label:
greater_equal_label:
less_equal_label:
    NOP

; ==========================================
; SECTION 8: Control Flow - IF Statement
; ==========================================
IF R1 > 5
    PRINT R1
    ADD R2, R1, 10
ELSE
    PRINT "Small value"
    SET R2, 0
ENDIF

; ==========================================
; SECTION 9: Control Flow - WHILE Loop
; ==========================================
SET counter, 0
WHILE counter < 5
    PRINT counter
    INC counter
ENDWHILE

; ==========================================
; SECTION 10: Control Flow - FOR Loop
; ==========================================
FOR i FROM 0 TO 10 STEP 2
    PRINT i
    ADD sum, sum, i
ENDFOR

; ==========================================
; SECTION 11: Control Flow - LOOP Statement
; ==========================================
LOOP R1, 5
    PRINT R1
    MUL R2, R2, 2
ENDLOOP

; ==========================================
; SECTION 12: Control Flow - REPEAT-UNTIL
; ==========================================
SET counter, 0
REPEAT
    PRINT counter
    INC counter
UNTIL counter == 10

; ==========================================
; SECTION 13: Functions
; ==========================================
FUNC factorial
    ; Calculate factorial of R1
    LOAD R2, 1
    LOAD R3, R1

    factorial_loop:
        CMP R3, 1
        JLE factorial_done
        MUL R2, R2, R3
        DEC R3
        JMP factorial_loop

    factorial_done:
        RET R2
ENDFUNC

FUNC add_numbers
    ADD R1, R2, R3
    RET R1
ENDFUNC

; ==========================================
; SECTION 14: Function Calls
; ==========================================
LOAD R1, 5
CALL factorial
SET result, R2
PRINT result

; ==========================================
; SECTION 15: Stack Operations
; ==========================================
PUSH R1
PUSH R2
PUSH 42
POP R3
POP R4
POP R5

; ==========================================
; SECTION 16: I/O Operations
; ==========================================
PRINT "Enter a number:"
INPUT R1
PRINT R1
PRINT sum
PRINT "Result: "

; ==========================================
; SECTION 17: System Operations
; ==========================================
NOP
HALT

; ==========================================
; SECTION 18: Complex Example - Fibonacci
; ==========================================
fibonacci_example:
    VAR fib_a, 0
    VAR fib_b, 1
    VAR fib_count, 10

    PRINT fib_a
    PRINT fib_b

    FOR i FROM 2 TO fib_count
        LOAD R1, fib_a
        LOAD R2, fib_b
        ADD R3, R1, R2
        SET fib_a, R2
        SET fib_b, R3
        PRINT R3
    ENDFOR

end_program:
    HALT

